service: appsync-ts-crud
frameworkVersion: '2'

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-esbuild
  - serverless-export-env

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: ap-southeast-2
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'

package:
  exclude:
    - package-lock.json
    - package.json
  individually: true

custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage, "dev"}
  appSync:
    - ${file(serverless.appsync-api.yml)}
  esbuild:
    packager: npm
    bundle: true
    minify: false

functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE_NAME: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: 'dynamodb:PutItem'
        Resource: !GetAtt UsersTable.Arn

  createBook:
    handler: functions/createBook.handler
    environment:
      BOOKS_TABLE_NAME: !Ref BooksTable
    iamRoleStatements:
      - Effect: Allow
        Action: 'dynamodb:PutItem'
        Resource: !GetAtt BooksTable.Arn

  updateBook:
    handler: functions/updateBook.handler
    environment:
      BOOKS_TABLE_NAME: !Ref BooksTable
    iamRoleStatements:
      - Effect: Allow
        Action: 'dynamodb:UpdateItem'
        Resource: !GetAtt BooksTable.Arn

  getBook:
    handler: functions/getBook.handler
    environment:
      BOOKS_TABLE_NAME: !Ref BooksTable
    iamRoleStatements:
      - Effect: Allow
        Action: 'dynamodb:GetItem'
        Resource: !GetAtt BooksTable.Arn

  deleteBook:
    handler: functions/getDelete.handler
    environment:
      BOOKS_TABLE_NAME: !Ref BooksTable
    iamRoleStatements:
      - Effect: Allow
        Action: 'dynamodb:DeleteItem'
        Resource: !GetAtt BooksTable.Arn

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: users-table

    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: books-table

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

    UserPoolInvokeConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

  Outputs:
    AwsRegion:
      Value: ${self:custom.region}
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
    WebUserPoolClientId:
      Value: !Ref WebUserPoolClient
    ApiUrl:
      Value: !GetAtt AppsynctscrudGraphQlApi.GraphQLUrl
